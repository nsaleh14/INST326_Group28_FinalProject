'''
Group 28 - Naseem Saleh, Jack Bonin
 
INST326 - Final Project
Weather App

A script that will create a weather app using a Weather API that allows the
 user to check the weather forecasts of the current date or any date in the past
 of their choosing. The user will be able to input a specific date and get
 the forecast information for that day such as temperature, humidity, condition, etc.
'''


import requests
import json #not being used ?
from datetime import datetime, timedelta
import unittest
from unittest.mock import patch, Mock
import time #Import to slow down requests to server ?


#Unit testing:

class WeatherTest(unittest.TestCase):
    '''
    This class is for performing unit tests for the WeatherAPI class.
    
    '''
    
    def setUp(self):
        '''Initializes the necessary test attributes for the class.'''
        fake_api_key = "thisisfake20i9ei0920i"
        self.base_url = "https://api.openweathermap.org/data/3.0"
        self.weather_api = WeatherAPI(fake_api_key)
        
    #@patch('module.class.method')
    @patch('requests.get')
    def get_weather_for_current_date_test(self, mock_get):
        '''
        Tests the get_weather method using the current date.
        
        '''
        mock_response = Mock()
        mock_response.json.return_value = {"current" : "today's weather data hm"}
        mock_response.raise_for_status = Mock()
        mock_get.return_value = mock_response
        
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        test_result = self.weather_api.get_weather(lat, lon, current_date)
        
        #params = self.weather_api().
        mock_get.assert_called_once_with(f"{self.base_url}/onecall", 
                                   params={"lat" : lat, "lon" : lon, "appid": self.weather_api.api_key, "units": "imperial"}
                                   )
        
        self.assertEqual(test_result, {"current": "today's weather data hm"})
        
        
    @patch('requests.get')
    def test_get_weather_for_past_seven_days(self, mock_get):
        '''
        Tests the get_weather method for a date in the past seven days
        '''
        mock_response = Mock()
        mock_response.json.return_value = {"historical": "time machine weather data"}
        mock_response.raise_for_status = Mock()
        mock_get.return_value = mock_response
        
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        past_date = (current_date - timedelta(days=4))
        date_obj = datetime.strptime(past_date, "%Y-%m-%d")
        
        #Calls the method for testing:
        test_result = self.weather_api.get_weather(lat, lon, past_date)
        
        mock_get.assert_called_once_with(f"{self.base_url}/onecall/timemachine",
                                 params={"lat": lat, "lon": lon, "dt": int(date_obj.timestamp()), "appid": self.weather_api.api_key, "units": "imperial"}
                                 )
        
        self.assertEqual(test_result, {"historical": "time machine weather data"})
        
        pass
    
    
    @patch('requests.get')
    def test_get_weather_for_historical_date(self, mock_get):
        '''
        Tests the get_weather method for a date farther than seven days in the past.
        '''
        #Creates a fake response mimicking from the API:
        mock_response = Mock()
        mock_response.json.return_value = {"historical": "summary data"}
        mock_response.raise_for_status = Mock()
        mock_get.return_value = mock_response
        
        
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        past_date = (current_date - timedelta(days=14))
        date_obj = datetime.strptime(past_date, "%Y-%m-%d")
        
        test_result = self.weather_api.get_weather(past_date, lat, lon)
        
        mock_get.assert_called_once_with(f"{self.base_url}/onecall/day_summary",
                                         params={"lat": lat, "lon": lon, "date": past_date, "appid": self.weather_api.api_key, "units": "imperial"}
                                         )
        
        self.assertEqual(test_result, {"historical": "summary_data"})
        pass
    
    @patch('requests.get')
    def test_get_weather_for_future_seven_days(self, mock_get):
        '''
        Tests the get_weather method for within seven days in the future.
        '''
        #Creates a fake response mimicking from the API:
        mock_response = Mock()
        mock_response.json.return_value = {"forecast": "future seven days data"}
        mock_response.raise_for_status = Mock()
        mock_get.return_value = mock_response
        
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        future_date = (current_date + timedelta(days=6))
        
        test_result = self.weather_api.get_weather(lat, lon, future_date)
        
        mock_get.assert_called_once_with(f"{"self.base_url"}/oncecall",
                                         params={"lat": lat, "lon" : lon, "appid": self.weather_api.api_key, "units": "imperial"}
                                         )
        
        self.assertEqual(test_result, {"forecast": "future seven days data"})
        
    def test_get_weather_for_impossible_future_day(self):
        '''Tests the get weather method for beyond seven days in the future.
        '''
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        future_date = (current_date + timedelta(days=358)).strftime("%Y-%m-%d")
        
        test_result = self.weather_api.get_weather(lat, lon, future_date)
        
        self.assertEqual(test_result, {"error": f"No forecast data available for {future_date}. Forecasts are only available up to 7 days in advance."}
                         )
    
    def test_get_weather_invalid_date_format(self):
        '''
        Tests the get_weather method for an invalid date format.
        '''
        invalid_date = "80-D0-223"
        with self.assertRaises(ValueError):
            self.weather_api.get_weather(invalid_date, 38.989697, -76.937759)
            
    def test_get_weather_invalid_coordinates_format(self):
        '''
        Tests the get_weather method with invalid latitude and longitude format.
        '''
        current_date = datetime.now().strftime("%Y-%m-%d")
        invalid_lat = "3809"
        invalid_lon = -76937759
        with self.assertRaises(ValueError):
            self.weather_api.get_weather(current_date, invalid_lat, invalid_lon)
        
        
    
    def test_get_weather_api_request_error(self, mock_get):
        '''Tests to get Request error from API response'''
        
        mock_response = Mock()
        mock_response.raise_for_status.side_effect = requests.RequestException("Error: API error..")
        mock_get.return_value = mock_response
        
        current_date = datetime.now().strftime("%Y-%m-%d")
        lat = 38.989697
        lon = -76.937759
        
        with self.assertRaises(requests.RequestException):
            self.weather_api.get_weather(lat, lon, current_date)
        
    @patch('requests.get')
    def test_parse_weather_data_if_missing(self):
        '''
        Tests if the weather data has len = 0
        '''
        
        no_weather_data = {}
        
        with self.assertRaises():
            pass
        
        
        
        pass
    
    def test_parse_weather_data_(self):
        
        
        pass
        
    def test_parse_weather_data_(self):
        
        pass
    
    def weather_value_test(self):
        '''
        Tests if the appropriate weather forecast data can be found
        and that it is not None if it should have a value.
        '''
        pass
    
    def parsing_test(self):
        '''
        Tests to see if the weather data can be appropriately parsed
        and returns an error if not.
        '''
        pass
    
    def convert_format_test(self):
        '''
        Tests to see if the data was properly converted to a specific format or not.
        '''
        pass
    
    def app_test(self):
        '''
        Tests to see if the unit tests are being tested properly and the whole app
        script is working as it should.
        '''
        pass


class UserInterfaceTest(unittest.Testcase):
    '''
    This class is to perform unit tests for the UserInterface class.
    '''
    def setUp():
        
        
        pass
    
    pass

class WeatherAPI:
    """Handles the interactions with OpenWeatherMap API for the needed weather data
    
    Attributes:
        api_key(str): Key for openweathermap's api
        base_url(str): The first part of the url for openweathermap"""

    def __init__(self, api_key):
        """Initializes the API with the provided API key.
        
        Arguments:
            api_key(str): The key for the API."""

        self.api_key = api_key
        self.base_url = "https://api.openweathermap.org/data/3.0"

    def get_weather(self, lat, lon, date):
        """Fetches weather data for a specific latitude, longitude, and date.
        
        If date is in current week, gets forecast data.
        If it is in the past, gets historical weather data.

        Arguments:
            lat(float): latitude of the location inputted by the user
            lon(float): longitude of the location inputted
            date(str): the date in 'YYYY-MM-DD' format

        Returns:
            dict: weather data or an error message"""
        try:
            date_obj = datetime.strptime(date, "%Y-%m-%d") #Formats the inputted date
            current_date = datetime.now() #Gets today's date

            if date_obj.date() == current_date.date(): #Checks if user's input matches today's date
                endpoint = f"{self.base_url}/onecall" #Endpoint = end of the url
                #Parameters: lat = latitude, lon = longitude.
                params = {"lat": lat, "lon": lon, "appid": self.api_key, "units": "imperial"}
            elif date_obj < current_date: #If user's input less than today's date
                if date_obj < current_date - timedelta(days=7): #If seven days less than today's date
                    endpoint = f"{self.base_url}/onecall/day_summary"
                    params = {"lat": lat, "lon": lon, "date": date, "appid": self.api_key, "units": "imperial"}
                else:
                    endpoint = f"{self.base_url}/onecall/timemachine"
                    params = {
                        "lat": lat,
                        "lon": lon,
                        "dt": int(date_obj.timestamp()),
                        "appid": self.api_key,
                        "units": "imperial"
                    }
            elif date_obj <= current_date + timedelta(days=7): #If input less than/is today plus seven days in future
                endpoint = f"{self.base_url}/onecall"
                params = {"lat": lat, "lon": lon, "appid": self.api_key, "units": "imperial"}
            else:
                return {"error": f"No forecast data available for {date}. Forecasts are only available up to 7 days in advance."}

            response = requests.get(endpoint, params=params) #Gets weather data from API
            response.raise_for_status()
            return response.json()

        except requests.RequestException as e:
            print(f"Error fetching weather data: {e}") # change to return(f"..." ?)
            return None

    def parse_weather_data(self, weather_data, date):
        """Parses and formats the weather data to be displayed

        Arguments:
            weather_data(dict): raw weather data
            date(str): date for the requested weather data

        Returns:
            str: formatted weather information or an error message"""
        try:
            current_date = datetime.now() #Gets today's date
            formatted_date = current_date.strftime("%Y-%m-%d")

            if len(weather_data) == 0:
                return f"No weather data available for {date}."
            elif "daily" in weather_data and formatted_date != date: #Gets forecast data
                future_date = datetime.strptime(date, "%Y-%m-%d")

                current_date = datetime.now()

                print("future date", future_date)
                print("current date", current_date)
                days_in_future = (future_date - current_date).days
                print("days in the future: ", days_in_future)
                daily = weather_data["daily"][days_in_future + 1]
                temp_min = daily["temp"]["min"]
                temp_max = daily["temp"]["max"]
                humidity = daily.get("humidity", "N/A")
                wind_speed = daily.get("wind_speed", "N/A")
            elif "current" in weather_data and formatted_date == date: #Gets today's weather
                current = weather_data["current"]
                temp = current.get("temp", None)
                humidity = current.get("humidity", "N/A")
                wind_speed = current.get("wind_speed", "N/A")
            elif "temperature" in weather_data: #Gets past weather data
                temp_min = weather_data["temperature"].get("min", "N/A")
                temp_max = weather_data["temperature"].get("max", "N/A")
                humidity = weather_data["humidity"].get("afternoon", "N/A")
                wind_speed = weather_data["wind"]["max"].get("speed", "N/A")
            else:
                return f"No weather data available for {date}." #If date before 45 years too far in future

            if "temp" in locals(): #Also get precipitation?
                return (
                    f"Weather on {date}:\n"
                    f"- Temperature: {temp}ºF\n"
                    f"- Humidity: {humidity}%\n"
                    f"- Wind Speed: {wind_speed} mph"
                )
            else:
                return (
                    f"Weather on {date}:\n"
                    f"- Temperature Low: {temp_min}ºF\n"
                    f"- Temperature High: {temp_max}ºF\n"
                    f"- Humidity: {humidity}%\n"
                    f"- Wind Speed: {wind_speed} mph"
                )
        except KeyError as e:
            return f"Error parsing weather data. Missing key: {e}"


class UserInterface:
    """Manages user authentication and interactions for fetching the weather data
    
    Attributes:
        api_key(string) : The API key used to access openweathermap's API.
        weather_api(class object) : Uses a class to access the API with key
        users(dict) : A dictionary for username and password pairs the user will input.
    
    """

    def __init__(self, api_key):
        """Initializes the UI with an API key and user data"""

        self.weather_api = WeatherAPI(api_key)
        self.users = {} #Creates a dictionary for username and password pairs

    def sign_up(self):
        """Lets users create an account
        
        Prompts them to enter a username, then a password.
        If username already exists, tells them to sign in.
        Otherwise, adds the username and password pair to a dictionary."""

        username = input("Enter a new username: ")
        if username in self.users: #Checks if username already exists in dictionary
            print("Username already exists. Try signing in.")
            return #Change the print to return?
        password = input("Enter a new password: ")
        self.users[username] = password #Adds input as key-value pair to dictionary
        print("Sign-up successful! Please sign in.")

    def sign_in(self):
        """Authenticates an existing user on a sign-in attempt
        
        Returns:
            bool: True if user's password and username match, False if not
            """
            #See if can/should combine sign in and sign up
            
        username = input("Enter your username: ")
        password = input("Enter your password: ")
        if self.users.get(username) == password: #Checks if they match in dictionary
            print("Sign-in successful!")
            return True
        else:
            print("Invalid credentials. Please try again.")
            return False

    def fetch_weather(self):
        """Prompts the user coordinates (latitude and longitude), and date, and fetches the weather data
        
        Returns formatted weather data for user to see, or informs them of an error."""
        try:
            lat = float(input("Enter latitude: "))
            lon = float(input("Enter longitude: "))
            date = input("Enter date (YYYY-MM-DD): ")

            if not self.validate_date(date): #See if can just put this inside this method instead of seperate
                print(
                    "Invalid date. Please enter a date within the last 45 years or up to 7 days into the future."
                )
                return

            weather_data = self.weather_api.get_weather(lat, lon, date)
            if weather_data:
                #print(weather_data)
                #Outputs weather data in a user-friendly format:
                print(self.weather_api.parse_weather_data(weather_data, date))
            else:
                print("Failed to retrieve weather data.")
        except ValueError:
            print("Invalid latitude or longitude. Please try again.")

    def validate_date(self, date):
        """Validates that the date is in the correct format and within a supported range.

        Arguments:
            date(str): the date to validate

        Returns:
            bool: True if the date is valid and False otherwise"""
            
        try:
            date_obj = datetime.strptime(date, "%Y-%m-%d") #Formats the inputted date
            #Makes sure date is not more than 45 years ago:
            min_date = datetime.now() - timedelta(days=45 * 365)
            #The most you can get for the weather forecast is 7 days in the future:
            max_date = datetime.now() + timedelta(days=7)
            #Makes sure the inputted date is within the allowed range:
            return min_date <= date_obj <= max_date
        except ValueError:
            return False #Returns date as invalid


def main():
    """Main entry point for the weather application.
    Text will be printed for the user to see, then they will be
     prompted for input several times and can eventually access weather data.
    """
    
    api_key = "147b252829f2df2f360db79497da157e" #API key for openweathermap.org
    ui = UserInterface(api_key) #Class object initializes the user interface

    while True:
        print("\n1. Sign Up\n2. Sign In\n3. Exit")
        choice = input("Choose an option: ")
        if choice == "1": #Gets input from user and lets them sign up if input = "1"
            ui.sign_up()
        elif choice == "2": #Lets the user sign in if input = "2"
            if ui.sign_in():
                #Keeps the user in the program to allow them to keep checking weather
                # until they decide to log out and end the program:
                while True:
                    print("\n1. Check Weather\n2. Log Out")
                    sub_choice = input("Choose an option: ")
                    if sub_choice == "1": #If user enters "1", accesses api for weather data
                        ui.fetch_weather()
                    elif sub_choice == "2": #Ends the program if user enters "2"
                        print("Logged out.")
                        break
                    else:
                        print("Invalid choice. Please try again.")
        elif choice == "3": #Allows the user to exit without signing in/up
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    '''Calls the main function to run the program and output.'''
    main()
